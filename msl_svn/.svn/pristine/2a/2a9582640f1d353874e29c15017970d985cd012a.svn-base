import { Component, OnInit } from '@angular/core';
import { RouterModule, ActivatedRoute, Router } from '@angular/router';
import { Http, Jsonp, URLSearchParams, Headers, Response } from '@angular/http';
declare var mui: any;
import { deliverGoodsService } from  './deliverGoods.service';
import { Api } from '../api';
import { Ajax } from '../ajax';
declare var md5: any;
declare var $: any;
@Component({
  selector: 'app-cancelGoods',
  templateUrl: './deliverGoods.component.child.html',
  styleUrls: ['../myGoods/prePaidFreight/prePaidFreight.component.css'
    , './deliverGoods.component.child.css'],
  providers: [deliverGoodsService]

})

export class PublicGoods {

  public ajax: Ajax;
  public insurance: number;
  public info: any;
  public passwordWrongCounter:number;
  constructor(
    private route: ActivatedRoute,
    private router: Router,
    public service: deliverGoodsService,
    public http: Http
  ) {
    this.ajax = new Ajax(this.http);
    this.insurance = 1;
    this.passwordWrongCounter= 0;
  }
  //截取金额
  fmoney(s: any, n?: number) {
    n = n > 0 && n <= 20 ? n : 2;
    s = parseFloat((s + "").replace(/[^\d\.-]/g, "")).toFixed(n) + "";
    let l = s.split(".")[0].split("").reverse(), r = s.split(".")[1];
    let t = "";
    for (let i = 0; i < l.length; i++) {
      t += l[i] + ((i + 1) % 3 == 0 && (i + 1) != l.length ? "," : "");
    }
    return t.split("").reverse().join("") + "." + r;
  }
  ngOnInit(): void {
    let self = this;
    console.log(this.route.snapshot.params['orderNo']);
    this.service.getOrderInfoByOrderNo(this.route.snapshot.params['orderNo'])
      .then(data => this.info = data.data);
    mui('#sheet1').popover('toggle');
    mui.ready(function() {
      console.log("mui ready");
      var activeIndex = 0;// 数字索引
      var resultValue = "";// 密码结果
      var inputList = mui(".input-item");// 所有输入框
      var numberList = mui(".keyboard-number");// 所有数字键

      // 数字键盘点击事件
      mui("#keyboard").on("tap", ".keyboard-number", function() {
        //console.log("tap:",this.innerText);
        addNumber(this.innerText);
      });

      mui("#keyboard").on("tap", ".keboard-action", function() {
        var value = this.getAttribute("data-action");
        switch (value) {
          case "cancel":
            if (activeIndex > 0) {
              cancelNumber();
            }
            break;
          case "reset":
            resetInput();
            break;
        }
      });
      // 添加数字
      function addNumber(num) {
        inputList[activeIndex].innerText = "*";
        resultValue += num;
        activeIndex++;
        console.log('password:', resultValue);
        // 检测密码长度
        if (activeIndex >= 6) {
          self.checkPassword(resultValue);
          resetInput();
        }
      }
      // 撤销数字
      function cancelNumber() {
        activeIndex--;
        inputList[activeIndex].innerText = "";
        resultValue = resultValue.substring(0, resultValue.length - 1);
      }
      // 密码框置空
      function resetInput() {
        activeIndex = 0;
        resultValue = "";
        mui(".input-item").each(function(index, element) {
          (<HTMLElement>element).innerText = "";
        });
      }

    });
  }

  checkPassword(password: string) {
    let self = this;
    let orderNo = self.route.snapshot.params['orderNo'];
    mui('.load').popover('show');
    self.loadingTimeReduce(10);
    self.timeoutPromise(self.publishOrderInfo(orderNo, password), 10000)
      .catch(function(err) {
        console.log(err);
      }).then(data => {
        if (!data) {//超时
          mui('.load').popover('hide');
          mui.confirm('是否再次请求？', '网络错误', ['是', '否'], e => {
            console.log(e);
            if (e.index === 0) {
              self.checkPassword(password);
            }
          });
        }else if(data.code==6011){
          mui.toast(data.msg)
        }
        else if (data.msg !== 'success') {
          if(data.code==6104){
          mui.confirm('钱包余额不足请充值',' ',['取消','请充值'],e=>{
              if(e.index===1){
              self.router.navigateByUrl('personalCenter/DepositComponent')
              };
            })
          }
          //密码错误
           self.passwordWrongCounter+=1;
           if(self.passwordWrongCounter>=3){
             mui.confirm('交易密码已错误3次，点击忘记密码找回或者1小时以后再试',' ',['取消','忘记密码'],e=>{
                 if(e.index===1)self.pw();
               })
           }
          // mui.confirm('是否再次请求？', '请求失败', ['是', '否']
          console.log(data.msg);
          mui('.load').popover('hide');
          throw new Error('密码错误');
        } else {
          //密码正确
          mui('.box').popover('hide');
          console.log("密码正确");
        }
      }
      ).then(function getStatus() {
        $('.mui-backdrop').trigger('tap');
        self.getStatusByOrderNo(orderNo).then(data => {
          console.log('订单状态：', data.data);
          switch (data.data) {
            case 2:
              //mui.toast('已发布');
              $('#state').text('已发布');
              self.router.navigateByUrl("deliverGoods/Success");
              break;
            case 20:
              $('#state').text('支付中........');
              setTimeout(getStatus, 2000);
              break;
            case 30:
              mui.toast('支付完成');
              $('#state').text('支付完成........');
              self.router.navigateByUrl("deliverGoods/Success");
              break;
            case 60:
              mui.toast('支付失败');
              $('#state').text('支付失败........');
              self.router.navigateByUrl("market/MyGoods?info=myGoods");
              setTimeout(getStatus, 2000);
              break;
          }
        })
      });
  }

  timeoutPromise(promise: Promise<any>, ms: number) {
    var timeout = (
      new Promise(resolve => setTimeout(resolve, ms))
    ).then(function() {
      throw new Error('Operation timed out after ' + ms + ' ms');
    });
    return Promise.race([promise, timeout]);

  }
  loadingTimeTimer = null;
  loadingTimeReduce(second: number) {
    $('.progress').text(10);
    clearInterval(this.loadingTimeTimer);
    this.loadingTimeTimer = setInterval(() => {
      if (second <= 0) clearInterval(this.loadingTimeTimer);
      else $('.progress').text(--second);
      console.log(second);
    }, 2000);
  }

  showKeyboard() {
    if(this.info.pwdIsSet==0){
      mui.confirm('未设置交易密码',' ',['取消','设置密码'],e=>{
          if(e.index===1){
            this.router.navigateByUrl("personalCenter/SetPwd");
          };
        })
    }
    else mui('.box').popover('show');
  }
  //发布货源

  public publishOrderInfo(OrderNo: string, password: string): Promise<any> {
    let ownerPublishPayDTO = {
      "insurance": this.insurance,
      "orderNo": OrderNo,
      "password": md5(password),
      "userCode": localStorage['walletCode']
    };
    console.log(password);
    return this.ajax.myPost(Api.publishOrderInfo, ownerPublishPayDTO).toPromise();//.then(data=>console.log(data))

  }
  public getStatusByOrderNo(OrderNo: string): Promise<any> {
    return this.ajax.myget(Api.getStatusByOrderNo + OrderNo).toPromise();
  }
  //忘记密码
  pw() {
    this.router.navigateByUrl("personalCenter/FogetPsd");
  }
  ngOnDestory() {
    console.log('onDestory');
    $('.mui-backdrop').trigger('tap');
  }

}
